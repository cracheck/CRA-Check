using CRA_Check.Models;
using CRA_Check.ViewModels;
using MahApps.Metro.Controls;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Documents;

namespace CRA_Check.Views
{
    /// <summary>
    /// Interaction logic for ReleaseVulnerabilityDetailWindow.xaml
    /// Display the detail of vulnerabilities of a Releases
    /// </summary>
    public partial class ReleaseVulnerabilityDetailWindow : MetroWindow, INotifyPropertyChanged
    {
        /// <summary>
        /// MainViewModel
        /// </summary>
        private MainViewModel _mainViewModel;

        /// <summary>
        /// Release
        /// </summary>
        private Release _release;
        public Release Release
        {
            get { return _release; }
            set
            {
                _release = value;
                OnPropertyChanged();
            }
        }

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="mainViewModel">MainViewModel</param>
        /// <param name="release">Release that we want to diplax the details</param>
        public ReleaseVulnerabilityDetailWindow(MainViewModel mainViewModel, Release release)
        {
            _mainViewModel = mainViewModel;

            Release = release;

            InitializeComponent();

            DataContext = Release;
        }

        /// <summary>
        /// Action to generate a report of vulnerabilities
        /// </summary>
        /// <param name="sender">Not used</param>
        /// <param name="e">Not used</param>
        private async void GenerateReport_OnClick(object sender, RoutedEventArgs e)
        {
            SaveFileDialog dialog = new SaveFileDialog()
            {
                Filter = "Text Files(*.pdf)|*.pdf|All(*.*)|*"
            };

            if (dialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                _mainViewModel.ReportGenerator.GenerateReport(Release, dialog.FileName);
            }
        }

        /// <summary>
        /// Action to open an hyperlink
        /// </summary>
        /// <param name="sender">Hyperlink to be opened. The link is in the Tag</param>
        /// <param name="e">Not used</param>
        private void SourceHyperlink_OnClick(object sender, RoutedEventArgs e)
        {
            var hyperlink = sender as Hyperlink;

            if (hyperlink != null)
            {
                string url = hyperlink.Tag as string;

                if (url != null)
                {
                    Process.Start("explorer", url);
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
